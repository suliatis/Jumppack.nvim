==============================================================================
------------------------------------------------------------------------------
                                                        *jumppack* *jumppack.nvim*

[[*jumppack.txt*    Enhanced jumplist navigation for Neovim]]



jumplist navigation interface with floating window preview.
your jump history with visual feedback and flexible controls.


                                              *jumppack-contents*

  Introduction |jumppack-introduction| ................ |jumppack| |jumppack.nvim|
  
  Setup |jumppack-setup| .............................. |jumppack| |jumppack.nvim|
  
  Configuration |jumppack-configuration| .....................................
  
  Usage |jumppack-usage| .....................................................
  
  API Functions |jumppack-api| ...............................................
  
  Navigation |jumppack-navigation| ...........................................
  
  Display Options |jumppack-display| .........................................
  
  Preview |jumppack-preview| ......................... |Jumppack.preview_item()|
  
  Interface Management |jumppack-interface-management| .......................
  

                                      *jumppack-introduction*

provides an enhanced navigation interface for Neovim's jumplist.
plugin creates a floating window picker that allows users to visualize
navigate their jump history with preview functionality.

format: [indicator] [icon] [path/name] [lnum:col] [│ line preview]
● 󰢱 src/main.lua 45:12 │ local function init()
         ✗  config.json 10:5 │ "name": "jumppack"


 • Floating window interface for jump navigation
 • Preview mode showing destination content
 • Configurable key mappings and window appearance
 • Filtering options (current working directory only)
 • Edge wrapping for continuous navigation
 • Icon support with file type detection


                                                  *jumppack-setup*

Attila Süli
2025
MIT

------------------------------------------------------------------------------
Class ~
{Config}
Fields ~
{options} `(ConfigOptions)` Configuration options
{mappings} `(ConfigMappings)` Key mappings for actions
{window} `(ConfigWindow)` Window configuration

------------------------------------------------------------------------------
Class ~
{ConfigOptions}
Fields ~
{global_mappings} `(boolean)` Whether to override default <C-o>/<C-i> with Jumppack interface
{cwd_only} `(boolean)` Whether to include only jumps within current working directory
{wrap_edges} `(boolean)` Whether to wrap around edges when navigating
{default_view} `(string)` Default view mode ('list' or 'preview')

------------------------------------------------------------------------------
Class ~
{ConfigMappings}
Fields ~
{jump_back} `(string)` Key for jumping back
{jump_forward} `(string)` Key for jumping forward
{choose} `(string)` Key for choosing item
{choose_in_split} `(string)` Key for choosing item in split
{choose_in_tabpage} `(string)` Key for choosing item in tab
{choose_in_vsplit} `(string)` Key for choosing item in vsplit
{stop} `(string)` Key for stopping picker
{toggle_preview} `(string)` Key for toggling preview
{toggle_file_filter} `(string)` Key for toggling file-only filter
{toggle_cwd_filter} `(string)` Key for toggling current working directory filter
{toggle_show_hidden} `(string)` Key for toggling visibility of hidden items
{reset_filters} `(string)` Key for resetting all filters
{toggle_hidden} `(string)` Key for marking/unmarking current item as hidden
{jump_to_top} `(string)` Key for jumping to the top of the jumplist
{jump_to_bottom} `(string)` Key for jumping to the bottom of the jumplist

------------------------------------------------------------------------------
Class ~
{ConfigWindow}
Fields ~
{config} `(table|function|nil)` Float window config

------------------------------------------------------------------------------
Class ~
{FilterState}
Fields ~
{file_only} `(boolean)` Whether to show only jumps from current file
{cwd_only} `(boolean)` Whether to show only jumps from current working directory
{show_hidden} `(boolean)` Whether to show items marked as hidden

------------------------------------------------------------------------------
Class ~
{JumpItem}
Fields ~
{bufnr} `(number)` Buffer number
{path} `(string)` File path
{lnum} `(number)` Line number
{col} `(number)` Column number
{jump_index} `(number)` Index in jumplist
{is_current} `(boolean)` Whether this is current position
{offset} `(number)` Navigation offset from current position
{hidden} `(boolean|nil)` Whether this item is marked as hidden by user

------------------------------------------------------------------------------
Class ~
{Instance}
Fields ~
{opts} `(table)` Configuration options
{items} `(JumpItem[])` List of jump items (filtered)
{original_items} `(JumpItem[]|nil)` Original unfiltered items for filter operations
{filters} `(FilterState)` Filter state for item filtering
{buffers} `(table)` Buffer IDs
{windows} `(table)` Window IDs
{action_keys} `(table)` Action key mappings
{view_state} `(string)` Current view state ('list' or 'preview')
{visible_range} `(table)` Visible range info
{current_ind} `(number)` Current item index
{shown_inds} `(number[])` Shown item indices
{pending_count} `(string)` Accumulated count digits for navigation

------------------------------------------------------------------------------
Class ~
{PickerState}
Fields ~
{items} `(JumpItem[])` Available jump items
{selection} `(table)` Current selection info
{general_info} `(table)` General picker information

------------------------------------------------------------------------------
Setup Jumppack with optional configuration

Initialize Jumppack plugin with custom configuration. This function merges
provided config with defaults, sets up autocommands, highlights, and key mappings.
Also sets up a global `Jumppack` variable for convenient access from anywhere.

IMPORTANT: By default, this overrides Vim's native <C-o> and <C-i> jump commands
with Jumppack's enhanced interface. The original behavior can be preserved by
setting `options.global_mappings = false` and creating custom mappings.

Should be called once during plugin initialization, typically in your init.lua.

------------------------------------------------------------------------------
                                                              *Jumppack.setup()*
                           `Jumppack.setup`({config})

Usage ~
>lua
-- Basic setup with defaults (overrides <C-o>/<C-i>)
require('jumppack').setup()

-- Preserve original <C-o>/<C-i> behavior
require('jumppack').setup({
  options = {
    global_mappings = false -- Disable automatic override of jump keys
  }
})
-- Then set up custom mappings:
vim.keymap.set('n', '<Leader>o', function() Jumppack.start({ offset = -1 }) end)
vim.keymap.set('n', '<Leader>i', function() Jumppack.start({ offset = 1 }) end)

-- Complete configuration with all available options
require('jumppack').setup({
  options = {
    cwd_only = true,        -- Only show jumps within current working directory
    wrap_edges = true,      -- Allow wrapping when navigating with enhanced <C-o>/<C-i>
    default_view = 'list',  -- Start interface in list mode instead of preview
    global_mappings = true  -- Override default jump keys (this is the default)
  },
  mappings = {
    -- Navigation
    jump_back = '<Leader>o',    -- Custom back navigation
    jump_forward = '<Leader>i', -- Custom forward navigation

    -- Selection
    choose = '<CR>',            -- Choose item
    choose_in_split = '<C-s>',  -- Open in horizontal split
    choose_in_vsplit = '<C-v>', -- Open in vertical split
    choose_in_tabpage = '<C-t>',-- Open in new tab

    -- Control
    stop = '<Esc>',             -- Close picker
    toggle_preview = 'p',       -- Toggle preview mode

    -- Filtering (runtime filters, not persistent)
    toggle_file_filter = 'f',   -- Toggle current file filter
    toggle_cwd_filter = 'c',    -- Toggle current directory filter
    toggle_show_hidden = '.',   -- Toggle visibility of hidden items
    reset_filters = 'r',        -- Clear all active filters

    -- Hide management
    toggle_hidden = 'x',        -- Hide/unhide current item
  },
  window = {
    config = {
      relative = 'editor',
      width = 80,
      height = 15,
      row = 10,
      col = 10,
      style = 'minimal',
      border = 'rounded'
    }
  }
})
<

See also ~
|jumppack-configuration| For detailed configuration options

------------------------------------------------------------------------------

                                    *jumppack-configuration*

can be configured through the setup() function. All configuration
have sensible defaults and are optional.

Configuration Values ~


 Option              |  Default    |  Description                                |

 global_mappings     |  true       |  Override <C-o>/<C-i> with Jumppack        |
 cwd_only            |  false      |  Show only jumps in current directory      |
 wrap_edges          |  false      |  Wrap around list edges                    |
 default_view        |  'preview'  |  Initial view mode (list or preview)       |
 count_timeout_ms    |  1000       |  Timeout for count accumulation (ms)       |

Keymaps ~


 Key     |  Action              |  Description                              |

 <C-o>   |  jump_back           |  Navigate backward in jumplist           |
 <C-i>   |  jump_forward        |  Navigate forward in jumplist            |
 gg      |  jump_to_top         |  Jump to top of list                     |
 G       |  jump_to_bottom      |  Jump to bottom of list                  |


 Key     |  Action              |  Description                              |

 <CR>    |  choose              |  Go to selected jump location            |
 <C-s>   |  choose_in_split     |  Open in horizontal split                |
 <C-v>   |  choose_in_vsplit    |  Open in vertical split                  |
 <C-t>   |  choose_in_tabpage   |  Open in new tab                         |


 Key     |  Action              |  Description                              |

 <Esc>   |  stop                |  Close picker                            |
 p       |  toggle_preview      |  Toggle preview mode                     |


 Key     |  Action              |  Description                              |

 f       |  toggle_file_filter  |  Toggle current file filter              |
 c       |  toggle_cwd_filter   |  Toggle current directory filter         |
 .       |  toggle_show_hidden  |  Toggle visibility of hidden items       |
 r       |  reset_filters       |  Clear all active filters                |

Management:
 Key     |  Action              |  Description                              |

 x       |  toggle_hidden       |  Mark/unmark item as hidden              |

the setup() function documentation and configuration examples for
information about all available options.

------------------------------------------------------------------------------

                                                  *jumppack-usage*

usage patterns and workflows for Jumppack navigation interface.

the API Functions section for detailed usage examples of all functions.


FUNCTIONS                                             *jumppack-api*

API functions for Jumppack navigation interface.

------------------------------------------------------------------------------
Start the jumplist navigation interface

Opens the jumplist navigation interface with a floating window. Displays available
jump positions with navigation preview. Supports directional navigation with offsets
and filtering options. The interface allows interactive selection and navigation
through your jump history with vim.jumplist.

------------------------------------------------------------------------------
  - offset (number): Navigation offset from current position. Negative for backward
    jumps (e.g., -1 for previous position), positive for forward jumps (e.g., 1 for next).
    If offset exceeds available range, falls back to nearest valid position.
  - source (table): Custom source configuration (advanced usage)

------------------------------------------------------------------------------
                                                              *Jumppack.start()*
                            `Jumppack.start`({opts})

Usage ~
>lua
-- Open interface showing previous jump position
Jumppack.start({ offset = -1 })

-- Open interface showing next jump position
Jumppack.start({ offset = 1 })

-- Open interface with no specific offset (shows all jumps)
Jumppack.start()

-- Advanced usage - capture selected item
local selected = Jumppack.start({ offset = -2 })
if selected then
  print('Selected:', selected.path, 'at line', selected.lnum)
end

-- Typical workflow integration (using global variable)
vim.keymap.set('n', '<C-o>', function()
  Jumppack.start({ offset = -1 })
end, { desc = 'Jump back with interface' })

vim.keymap.set('n', '<C-i>', function()
  Jumppack.start({ offset = 1 })
end, { desc = 'Jump forward with interface' })

-- Custom keymaps with global access
vim.keymap.set('n', '<Leader>j', function()
  Jumppack.start({ offset = -1 })
end, { desc = 'Jump back' })

-- Check if interface is active
if Jumppack.is_active() then
  print('Navigation interface is open')
end

-- Alternative: using require (not necessary after setup)
-- require('jumppack').start({ offset = -1 })
<

See also ~
|jumppack-navigation| For navigation patterns and workflows

------------------------------------------------------------------------------
                                                            *Jumppack.refresh()*
                              `Jumppack.refresh`()
Refresh the active navigation interface

Updates the jumplist interface with current jump data. Only works when the interface
is currently active. Useful for refreshing the view if the jumplist has changed
during operation or if you want to reload the data without closing and
reopening the interface.

Usage ~
>lua
-- Refresh current interface (only if active)
Jumppack.refresh()

-- Typical use in custom mappings
vim.keymap.set('n', '<F5>', function()
  if Jumppack.is_active() then
    Jumppack.refresh()
  end
end, { desc = 'Refresh jumppack interface' })
<

See also ~
|jumppack-interface-management| For interface lifecycle management

------------------------------------------------------------------------------

                                          *jumppack-navigation*

patterns and workflows for jump history management.


OPTIONS                                       *jumppack-display*

customization and formatting options.

------------------------------------------------------------------------------
Smart filename display that handles ambiguous names

------------------------------------------------------------------------------
Get position marker for jump item

------------------------------------------------------------------------------
Get line preview content for item

------------------------------------------------------------------------------
Display items in a buffer with syntax highlighting

Renders jump items in the navigation buffer with integrated format: [indicator] [icon] [path/name] [lnum:col]
Handles item formatting, icon display, position markers, and line preview. The format includes
position indicators, file type icons, smart filenames, line:column position, and optional line content preview.

------------------------------------------------------------------------------
                                                         *Jumppack.show_items()*
                `Jumppack.show_items`({buf_id}, {items}, {opts})
  - show_icons (boolean): Whether to show file type icons (default: true)
  - icons (table): Custom icon mapping for file types

Usage ~
>lua
-- Display items with default options (shows: ● lua/init.lua 1:1 │ local M = {})
local buf = vim.api.nvim_create_buf(false, true)
local items = {
  { path = 'lua/init.lua', lnum = 1, col = 1, offset = -1 },
  { path = 'config.lua', lnum = 15, col = 10, offset = 1, hidden = true }
}
Jumppack.show_items(buf, items)

-- Custom display options
Jumppack.show_items(buf, items, {
  show_icons = false,  -- Disable file icons (✗ config.lua 15:10 │ ...)
  icons = { file = '📄', none = '  ' }  -- Custom icons
})
<

See also ~
|jumppack-display| For display customization options

------------------------------------------------------------------------------
Preview a jump item in a buffer

Displays a preview of the jump destination in the preview buffer. Shows the
content around the jump target with syntax highlighting and cursor positioning.
Used by the interface's preview mode to show file content before navigation.

------------------------------------------------------------------------------
                                                       *Jumppack.preview_item()*
               `Jumppack.preview_item`({buf_id}, {item}, {opts})
  - context_lines (number): Number of lines to show around target (default: varies)
  - syntax_highlight (boolean): Whether to apply syntax highlighting (default: true)

Usage ~
>lua
-- Preview a jump item
local preview_buf = vim.api.nvim_create_buf(false, true)
local item = { bufnr = 1, lnum = 10, col = 0, path = 'init.lua' }
Jumppack.preview_item(preview_buf, item)

-- Clear preview
Jumppack.preview_item(preview_buf, nil)

-- Custom preview with more context
Jumppack.preview_item(preview_buf, item, {
  context_lines = 10,
  syntax_highlight = true
})
<


                                              *jumppack-preview*

functionality and customization options.

See also ~
|jumppack-preview| For preview customization

------------------------------------------------------------------------------
Choose and navigate to a jump item

Executes navigation to the selected jump item. Handles backward and forward
jumps using Vim's jump commands (Ctrl-o and Ctrl-i). This function performs the
actual jump navigation and closes the navigation interface.

------------------------------------------------------------------------------
                                                        *Jumppack.choose_item()*
                         `Jumppack.choose_item`({item})
  - Negative offset: Navigate backward in jumplist (uses <C-o>)
  - Positive offset: Navigate forward in jumplist (uses <C-i>)
  - Zero offset: Stay at current position

Usage ~
>lua
-- Navigate to a jump item (typically called by interface)
local item = { offset = -2, bufnr = 1, lnum = 10 }
Jumppack.choose_item(item)

-- Example of how interface uses this internally
vim.keymap.set('n', '<CR>', function()
  local current_item = get_selected_item()
  Jumppack.choose_item(current_item)
end, { buffer = interface_buf })
<

See also ~
|jumppack-navigation| For jump navigation patterns

------------------------------------------------------------------------------
Check if the navigation interface is currently active

Determines whether the Jumppack navigation interface is currently open and active.
Useful for conditional operations and preventing conflicts with multiple instances.

------------------------------------------------------------------------------

Usage ~
>lua
-- Check before performing operations
if Jumppack.is_active() then
  print('Interface is open')
  Jumppack.refresh()
else
  print('No active interface')
end

-- Conditional keymap behavior
vim.keymap.set('n', '<Esc>', function()
  if Jumppack.is_active() then
    -- Close interface
    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes('<Esc>', true, true, true), 'n', false)
  else
    -- Normal escape behavior
    vim.cmd('nohlsearch')
  end
end)
<


MANAGEMENT                         *jumppack-interface-management*

lifecycle management and state control.

------------------------------------------------------------------------------
Get the current state of the active navigation interface

Retrieves the current state of the active interface instance, including items,
selection, and general information. Returns nil if no interface is active. Useful
for inspecting interface state and implementing custom behaviors.

------------------------------------------------------------------------------
                                                          *Jumppack.get_state()*
                             `Jumppack.get_state`()
  - items (JumpItem[]): Available jump items
  - selection (table): Current selection with index
  - general_info (table): Interface metadata and configuration
  - current (JumpItem): Currently selected item

Usage ~
>lua
-- Get and inspect interface state
local state = Jumppack.get_state()
if state then
  print('Selected item:', state.current.path)
  print('Total items:', #state.items)
  print('Selection index:', state.selection.index)
end

-- Custom behavior based on interface state
vim.keymap.set('n', '<C-g>', function()
  local state = Jumppack.get_state()
  if state and state.current then
    vim.notify(string.format('Jump: %s:%d', state.current.path, state.current.lnum))
  end
end, { desc = 'Show current jump info' })
<
------------------------------------------------------------------------------
jumplist source for picker

------------------------------------------------------------------------------
all valid jumps from jumplist

------------------------------------------------------------------------------
jump item from jumplist entry

------------------------------------------------------------------------------
best matching jump for target offset

------------------------------------------------------------------------------
filters to jump items

------------------------------------------------------------------------------
filter status text for display

------------------------------------------------------------------------------
file-only filter state

------------------------------------------------------------------------------
current working directory filter state

------------------------------------------------------------------------------
show hidden items filter state

------------------------------------------------------------------------------
all filter states to defaults

------------------------------------------------------------------------------
if any filter is currently active

------------------------------------------------------------------------------
list of currently active filters

------------------------------------------------------------------------------
hidden items from session storage

------------------------------------------------------------------------------
hidden items to session storage

------------------------------------------------------------------------------
hide key for jump item

------------------------------------------------------------------------------
if item is hidden

------------------------------------------------------------------------------
hide status for item

------------------------------------------------------------------------------
items with their hide status

------------------------------------------------------------------------------
and validate configuration

------------------------------------------------------------------------------
configuration to Jumppack

------------------------------------------------------------------------------
merged configuration

------------------------------------------------------------------------------
Setup global key mappings that override default jump behavior

Sets up global keymaps that replace Vim's default <C-o> and <C-i> jump
commands with Jumppack's enhanced interface. Only runs if global_mappings option
is enabled. The mappings support count prefixes (e.g., 3<C-o> for 3 jumps back).

------------------------------------------------------------------------------
picker options

------------------------------------------------------------------------------
new picker instance

------------------------------------------------------------------------------
main picker event loop

------------------------------------------------------------------------------
picker instance display

------------------------------------------------------------------------------
scratch buffer for picker

------------------------------------------------------------------------------
floating window for picker

------------------------------------------------------------------------------
window configuration

------------------------------------------------------------------------------
focus loss for picker instance

------------------------------------------------------------------------------
items and initial selection for instance

------------------------------------------------------------------------------
initial selection when items are filtered

------------------------------------------------------------------------------
filters and update display

------------------------------------------------------------------------------
best selection index when items are filtered

------------------------------------------------------------------------------
or restart count timeout timer

------------------------------------------------------------------------------
count timeout timer

------------------------------------------------------------------------------
jump item to display string with format: [indicator] [icon] [path/name] [lnum:col]

------------------------------------------------------------------------------
current selection index

------------------------------------------------------------------------------
buffer lines with current items

------------------------------------------------------------------------------
key mappings for actions

------------------------------------------------------------------------------
window border text

------------------------------------------------------------------------------
footer content for window

------------------------------------------------------------------------------
picker instance and cleanup

------------------------------------------------------------------------------
current item with optional pre-command

------------------------------------------------------------------------------
current selection by offset or to position

------------------------------------------------------------------------------
currently selected item

------------------------------------------------------------------------------
list buffer view

------------------------------------------------------------------------------
current view based on instance view state

------------------------------------------------------------------------------
general information about picker state

------------------------------------------------------------------------------
preview buffer view

------------------------------------------------------------------------------
icon for item

------------------------------------------------------------------------------
filesystem type for path

------------------------------------------------------------------------------
Set lines in preview buffer with syntax highlighting

------------------------------------------------------------------------------
Check if preview buffer should be syntax highlighted based on size limits

------------------------------------------------------------------------------
Highlight specific region in preview buffer

------------------------------------------------------------------------------
error message

------------------------------------------------------------------------------
value type and error if invalid

------------------------------------------------------------------------------
notification message

------------------------------------------------------------------------------
if buffer ID is valid

------------------------------------------------------------------------------
if window ID is valid

------------------------------------------------------------------------------
scratch buffer

------------------------------------------------------------------------------
Safely set buffer lines (ignores errors from invalid buffers)

------------------------------------------------------------------------------
Set window buffer

------------------------------------------------------------------------------
Safely set extmark (ignores errors from invalid buffers)

------------------------------------------------------------------------------




 vim:tw=78:ts=8:noet:ft=help:norl: